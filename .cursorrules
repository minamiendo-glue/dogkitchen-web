
  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  
  ## Auto Code Generation
  - Always implement code directly instead of just providing examples or suggestions.
  - Proactively create files and components when discussing features.
  - Use tools to write, edit, and manage code files automatically.
  - Generate complete, working implementations rather than partial code snippets.
  - Create necessary configuration files, types, and utilities automatically.
  - Implement error handling, loading states, and edge cases by default.
  - Always include proper imports, exports, and dependencies.
  
  ## Implementation Workflow
  - Before implementing new features or making significant changes, always discuss the architecture and approach first.
  - Present the proposed structure, file organization, and implementation plan.
  - Wait for user approval before starting implementation.
  - Only proceed with code generation after receiving explicit confirmation.
  
  ## Robust Development Practices
  - Always prioritize security, performance, and maintainability in all implementations.
  - Use industry-standard, well-tested libraries and patterns.
  - Implement comprehensive error handling and validation.
  - Follow security best practices: input sanitization, CSRF protection, secure headers.
  - Use TypeScript strict mode and proper type definitions.
  - Implement proper loading states, error boundaries, and fallbacks.
  - Add comprehensive logging and monitoring capabilities.
  - Use environment variables for configuration and secrets.
  - Implement proper caching strategies and performance optimizations.
  - Follow accessibility (a11y) guidelines and WCAG standards.
  - Write clean, documented, and testable code.
  - Use semantic HTML and proper SEO practices.
  